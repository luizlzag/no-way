<div class="previsao-entrega-widget">
  <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 35 35" fill="none">
    <path d="M20.2432 10.1218H23.6228C23.9765 10.1218 24.1533 10.1218 24.3197 10.1618C24.4673 10.1972 24.6083 10.2556 24.7377 10.3349C24.8836 10.4243 25.0086 10.5494 25.2587 10.7995L31.1333 16.674C31.3834 16.9241 31.5084 17.0492 31.5979 17.1951C31.6771 17.3245 31.7356 17.4655 31.771 17.6131C31.8109 17.7795 31.8109 17.9563 31.8109 18.31V22.4126C31.8109 23.0863 31.8109 23.4232 31.7009 23.6889C31.5541 24.0432 31.2726 24.3247 30.9183 24.4714C30.6526 24.5815 30.3157 24.5815 29.642 24.5815M22.4122 24.5815H20.2432M20.2432 24.5815V10.411C20.2432 8.79139 20.2432 7.98158 19.928 7.36296C19.6507 6.81881 19.2083 6.3764 18.6642 6.09914C18.0456 5.78394 17.2357 5.78394 15.6161 5.78394H7.5187C5.89906 5.78394 5.08924 5.78394 4.47062 6.09914C3.92647 6.3764 3.48406 6.81881 3.2068 7.36296C2.8916 7.98158 2.8916 8.79139 2.8916 10.411V21.6896C2.8916 23.2867 4.18636 24.5815 5.78353 24.5815M20.2432 24.5815H14.4593M14.4593 24.5815C14.4593 26.9773 12.5172 28.9194 10.1214 28.9194C7.72568 28.9194 5.78353 26.9773 5.78353 24.5815M14.4593 24.5815C14.4593 22.1857 12.5172 20.2436 10.1214 20.2436C7.72568 20.2436 5.78353 22.1857 5.78353 24.5815M29.642 25.3045C29.642 27.3009 28.0235 28.9194 26.0271 28.9194C24.0306 28.9194 22.4122 27.3009 22.4122 25.3045C22.4122 23.308 24.0306 21.6896 26.0271 21.6896C28.0235 21.6896 29.642 23.308 29.642 25.3045Z" stroke="#313135" stroke-width="1.73516" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>

  <div class="text-block-results">
    <p>Frete Grátis para todo Brasil</p>
    <div id="delivery-estimate-result">
      <p>Calculando para a sua região...</p>
    </div>
  </div>

  <div class="tip-toast-info" role="button" aria-expanded="false" tabindex="0">
    <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" viewBox="0 0 19 19" fill="none" aria-hidden="true">
      <path d="M9.70345 12.685V9.35164M9.70345 6.01831H9.71178M18.0368 9.35164C18.0368 13.954 14.3058 17.685 9.70345 17.685C5.10108 17.685 1.37012 13.954 1.37012 9.35164C1.37012 4.74927 5.10108 1.01831 9.70345 1.01831C14.3058 1.01831 18.0368 4.74927 18.0368 9.35164Z" stroke="#68686E" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>

    <!-- Tooltip (conteúdo do balão) -->
    <div class="tip-tooltip" role="tooltip" aria-hidden="true">
      Estimativa calculada com base na sua localização atual. Pode variar conforme o CEP informado no checkout.
    </div>
  </div>
</div>

<style>
  .text-block-results p { margin: 0; }
  .previsao-entrega-widget{
    display: flex;
    padding: 12px 16px;
    align-items: center;
    gap: 24px;
    border-radius: 8px;
    background: var(--Gray-100, #EFEFF0);
    position: relative;
  }

  /* --- TIP (tooltip) --- */
  .tip-toast-info{
    position: relative;            /* necessário para o tooltip */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border-radius: 8px;
    padding: 6px;                  /* touch target melhorado */
    user-select: none;
    -webkit-tap-highlight-color: transparent;
  }

  .tip-tooltip{
    position: absolute;
    bottom: calc(100% + 10px);    /* acima do ícone */
    left: 50%;
    transform: translateX(-50%) translateY(6px);
    max-width: 320px;
    width: max-content;
    background: var(--MID-WHITE, #F9F9FB);
    color: #313135;
    padding: 10px 12px;
    font-size: 13px;
    line-height: 1.3;
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    opacity: 0;
    pointer-events: none;
    transition: opacity 150ms ease, transform 150ms ease;
    z-index: 60;
    white-space: normal;
    text-align: left;
  }

  .tip-tooltip::after{
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 6px;
    border-style: solid;
    border-color: #F9F9FB transparent transparent transparent;
  }

  /* quando aberto */
  .tip-toast-info[aria-expanded="true"] .tip-tooltip,
  .tip-toast-info:hover .tip-tooltip,
  .tip-toast-info:focus .tip-tooltip {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
    pointer-events: auto;
  }

  /* mobile / responsividade */
  @media (max-width: 640px) {
    .previsao-entrega-widget {
      flex-direction: column;
      align-items: flex-start;
      gap: 12px;
      padding: 10px;
    }

    .previsao-entrega-widget svg[width="35"]{
      width: 28px;
      height: 28px;
    }

    .tip-tooltip{
      bottom: auto;
      top: calc(100% + 10px); /* no mobile deixa abaixo do ícone */
      left: 0;
      transform: translateX(0) translateY(6px);
      width: calc(100vw - 32px);
      max-width: calc(100vw - 32px);
      font-size: 13px;
    }

    .tip-tooltip::after{
      top: -6px;
      transform: translateX(12px) rotate(180deg);
      border-color: transparent transparent #F9F9FB transparent;
    }

    .tip-toast-info[aria-expanded="true"] .tip-tooltip,
    .tip-toast-info:focus .tip-tooltip{
      transform: translateX(0) translateY(0);
    }
  }

  /* evite overflow na viewport */
  .tip-tooltip {
    left: 50%;
    right: auto;
    max-width: calc(100vw - 40px);
    word-wrap: break-word;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // --- Estimativa (seu código) --- (mantemos o código do fetch)
    const estimateContainer = document.getElementById('delivery-estimate-result');
    if (estimateContainer) {
      const suaApiUrl = 'https://api-vampira-v2.vercel.app/api/proxy';
      const requestOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          method: 'get',
          url: 'http://ip-api.com/json/?fields=status,message,regionName,region'
        })
      };

      fetch(suaApiUrl, requestOptions)
        .then(response => response.json())
        .then(data => {
          const geoData = data.body;
          if (geoData && geoData.status === 'success' && geoData.regionName) {
            const estado = geoData.regionName;
            const siglaEstado = geoData.region;
            let mensagem = '';
            switch (siglaEstado) {
              case 'SP':
                mensagem = `Entrega estimada para <strong>${estado}</strong>: 1 a 3 dias úteis.`;
                break;
              case 'RJ':
              case 'MG':
              case 'ES':
                mensagem = `Entrega estimada para <strong>${estado}</strong>: 3 a 5 dias úteis.`;
                break;
              case 'PR':
              case 'SC':
              case 'RS':
                mensagem = `Entrega estimada para <strong>${estado}</strong>: 4 a 7 dias úteis.`;
                break;
              default:
                mensagem = `Entrega estimada para <strong>${estado}</strong>: 7 a 12 dias úteis.`;
                break;
            }
            estimateContainer.innerHTML = `<p>${mensagem}</p>`;
          } else {
            estimateContainer.innerHTML = '<p>Não foi possível estimar a entrega para sua região.</p>';
          }
        })
        .catch(error => {
          console.error('Erro ao chamar a API proxy v2:', error);
          estimateContainer.innerHTML = '<p>Ocorreu um erro ao calcular o prazo.</p>';
        });
    }

    // --- TOOLTIP: hover / focus / click / touch / ESC / click outside ---
    const widgets = document.querySelectorAll('.previsao-entrega-widget');
    widgets.forEach((widget, index) => {
      const tipWrapper = widget.querySelector('.tip-toast-info');
      const tooltip = widget.querySelector('.tip-tooltip');

      if (!tipWrapper || !tooltip) return;

      // garantir IDs únicos e associação aria
      const tooltipId = `delivery-tooltip-${Date.now()}-${index}`;
      tooltip.setAttribute('id', tooltipId);
      tooltip.setAttribute('aria-hidden', 'true');
      tipWrapper.setAttribute('aria-describedby', tooltipId);
      tipWrapper.setAttribute('aria-expanded', 'false');

      let hideTimeout = null;
      let isTouch = false;

      // show / hide helpers
      const show = () => {
        clearTimeout(hideTimeout);
        tipWrapper.setAttribute('aria-expanded', 'true');
        tooltip.setAttribute('aria-hidden', 'false');
      };
      const hide = () => {
        tipWrapper.setAttribute('aria-expanded', 'false');
        tooltip.setAttribute('aria-hidden', 'true');
      };

      // mouse events
      tipWrapper.addEventListener('mouseenter', (e) => {
        if (isTouch) return;
        show();
      });
      tipWrapper.addEventListener('mouseleave', () => {
        if (isTouch) return;
        hideTimeout = setTimeout(hide, 200);
      });

      // focus/blur for keyboard accessibility
      tipWrapper.addEventListener('focus', () => show());
      tipWrapper.addEventListener('blur', () => hide());

      // click/touch toggles on mobile and desktop
      tipWrapper.addEventListener('click', (e) => {
        // prevent immediate blur on touch devices
        e.stopPropagation();
        isTouch = (e.pointerType === 'touch') || ('ontouchstart' in window);
        const expanded = tipWrapper.getAttribute('aria-expanded') === 'true';
        if (expanded) hide(); else show();
      });

      // close on ESC
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' || e.key === 'Esc') {
          hide();
        }
      });

      // close when click outside
      document.addEventListener('click', (e) => {
        if (!widget.contains(e.target)) {
          hide();
        }
      });

      // touchstart outside also closes
      document.addEventListener('touchstart', (e) => {
        if (!widget.contains(e.target)) hide();
      }, {passive: true});
    });
  });
</script>
